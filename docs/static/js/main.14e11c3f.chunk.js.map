{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","onChange","target","value","type","getGifs","category","a","apiQuery","encodeURI","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAuCeA,EApCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAoBvC,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,IACdO,QAAQC,IAAI,kBAMhB,SACG,uBACKC,SAnBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOC,QAmBhBC,KAAK,OACLD,MAAQZ,O,+BC3BXc,EAAO,uCAAG,WAAQC,GAAR,yBAAAC,EAAA,4DAEJ,+BACA,mCACE,GACXC,EAAWC,UAAWH,GAEtBI,EAPa,iBAEJ,+BAFI,cAOeF,EAPf,kBAIF,GAJE,oBAGJ,oCAHI,SAQAG,MAAOD,GARP,cAQbE,EARa,iBASIA,EAAKC,OATT,wBASXC,EATW,EASXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAdvB,kBAmBZK,GAnBY,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAGrC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,kCAAMA,EAAN,WCACO,EAAU,SAAC,GAAmB,IAAhBpB,EAAe,EAAfA,SAAe,ECLd,SAAEA,GAAe,IAAD,EAEdhB,mBAAS,CAC/BwB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA2BxC,OAnBAC,qBAAW,WACPzB,EAASC,GAEJyB,MAAM,SAAAC,GAEHC,YAAY,WAERlC,QAAQC,IAAIgC,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAGZ,CAAErB,IAGEsB,EDnB2BM,CAAc5B,GAAlCc,EAHwB,EAG9BN,KAAca,EAHgB,EAGhBA,QAgCtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAsDjB,EAAtD,OAEEqB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAIYH,EAAOJ,KAEH,SAAEC,GAEF,OAAO,cAAC,EAAD,eAGMA,GAFAA,EAAIC,aEnB9BiB,EAnCM,WAAM,MAGa7C,mBAAS,CAAC,cAHvB,mBAGhB8C,EAHgB,KAGJ/C,EAHI,KAUvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAIA,6BAEQ+C,EAAWpB,KAAK,SAAAV,GAAQ,OAEpB,aADA,CACC,EAAD,CACIA,SAAWA,GACLA,Y,MCvBlC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.14e11c3f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2) {\n            //props.setCategories( cats => [ ...cats, inputValue] );\n            setCategories( cats => [ inputValue, ...cats] ); // Para ordenar en forma inversa\n            setInputValue('');\n            console.log('Submit hecho');\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit } >\n           <input \n                onChange={ handleInputChange }\n                type=\"text\"\n                value={ inputValue }\n           />\n        </ form>\n    )\n}\n\n// La funcion es obligatoria\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","\nexport const getGifs = async ( category ) => {\n\n    const apiURL = 'api.giphy.com/v1/gifs/search';\n    const apiKey = 'biO7zC5kO4A2lkJDRxWBoyPG0rNWhFHJ';\n    const apiLimit = 10;\n    const apiQuery = encodeURI( category );\n\n    const url = `http://${apiURL}?q=${apiQuery}&limit=${apiLimit}&api_key=${apiKey}`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url // el ? es por si no viene nada\n        }\n    })\n\n    //console.log( gifs );\n    return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    //console.log( id, title, url );\n    return (\n        <div className='card animate__animated animate__fadeIn' >\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","// https://developers.giphy.com/docs/api/endpoint#search\n\n//import React, { useEffect, useState } from 'react'\nimport React from 'react'\n//import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category }) => {\n\n    //const [images, setImages] = useState([]);\n    const { data: images, loading } = useFetchGifs( category ); // custom hook\n\n    // Ejecuta solo cuando el componente es renderizado por primera vez\n    // useEffect( () => {\n    //     getGifs( category )\n    //         //.then( imgs => setImages( imgs ) );\n    //         .then( setImages );\n    // }, [ category ]);\n\n    // const getGifs = async () => {\n\n    //     const apiURL = 'api.giphy.com/v1/gifs/search';\n    //     const apiKey = 'biO7zC5kO4A2lkJDRxWBoyPG0rNWhFHJ';\n    //     const apiLimit = 10;\n    //     const apiQuery = encodeURI( category );\n\n    //     const url = `http://${apiURL}?q=${apiQuery}&limit=${apiLimit}&api_key=${apiKey}`;\n    //     const resp = await fetch( url );\n    //     const { data } = await resp.json();\n    //     const gifs = data.map( img => {\n    //         return {\n    //             id: img.id,\n    //             title: img.title,\n    //             url: img.images?.downsized_medium.url // el ? es por si no viene nada\n    //         }\n    //     })\n\n    //     //console.log( gifs );\n    //     setImages( gifs );\n\n    // }\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\" > { category } </h3>\n\n            { loading && <p className=\"animate__animated animate__flash\" >Loading</p> }\n\n            <div className=\"card-grid\" >\n                {/* <ol> */}\n                    { \n                        // images.map( imagen =>  <li key={imagen.id} >{imagen.title} </li> )\n                        images.map( \n                            //( {id, title } ) => {\n                            ( img ) => {\n                                //return <li key={id} > {title} </li>\n                            return <GifGridItem \n                                    key={img.id} \n                                    // img={img}\n                                    { ...img } // envio cada una de las propiedades de img como independientes\n                                />\n                            } \n                        )\n                    }\n                {/* </ol> */}\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    // Ejecuta solo cuando el componente es renderizado por primera vez\n    useEffect( () => {\n        getGifs( category )\n            //.then( imgs => setImages( imgs ) );\n            .then( imgs => {\n\n                setTimeout( () => {\n\n                    console.log(imgs)\n                    setstate({\n                        data: imgs,\n                        loading: false\n                    });\n\n                }, 2000 );\n\n            } );\n    }, [ category ]);\n\n\n    return state; \n}\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n    //     setCategories( [...categories, 'HunterXHunter'] );\n    //     //setCategories( cats => [ ...cats, 'HunterXHunter'] );\n    // }\n\n    return (\n        <>\n            <h1>GifExpertApp</h1>\n            <AddCategory setCategories={ setCategories } />\n            \n            <hr />\n\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\n\n            <ol>\n                { \n                    categories.map( category =>  \n                        // <li key={category} >{category}</li> \n                        <GifGrid \n                            category={ category } \n                            key={ category }\n                        />\n                    )\n                }\n            </ol>\n\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}